name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  py_build:
    name: Build Python package
    runs-on: ubuntu-latest

    steps:
      # Fetch full git repository and all submodules
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      # Checkout tags
      - name: Fetch tags
        run: |
          git fetch --prune --unshallow --tags
          echo exit code $?
          git tag --list

      # Setup python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Restore the python cache if it exists
      - name: Restore python cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install python dependencies for building unmanic
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      # Setup node environment for building unmanic's webui
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Build python dist package
      - name: Build python dist package
        id: build_py
        run: |
          echo "Short version:"
          python ./setup.py  --quiet --version
          echo "Long version:"
          python ./setup.py  --quiet fullversion
          REPO_URL="https://github.com/${GITHUB_REPOSITORY}/raw/${GITHUB_REF#refs/heads}/"
          sed -i "s|(./docs/|(${REPO_URL:?}/docs/|g" README.md
          python -m build --no-isolation --skip-dependency-check --wheel
          python -m build --no-isolation --skip-dependency-check --sdist

      # Read the python package distribution data (save version to file)
      - name: Read python package distribution data
        id: py_build_data
        run: |
          PY_VERSION=$(python ./setup.py  --quiet --version)
          PY_BDIST_PATH=$(ls  dist/*.whl | head -n1)
          PY_BDIST_FILE=${PY_BDIST_PATH#*/}
          echo "py_version=${PY_VERSION}" >> $GITHUB_OUTPUT
          echo "py_bdist_file=${PY_BDIST_FILE}" >> $GITHUB_OUTPUT
          echo "py_bdist_path=${PY_BDIST_PATH}" >> $GITHUB_OUTPUT
          echo ${PY_VERSION} > dist/VERSION.txt

      # Upload python package distribution data artifact
      - uses: actions/upload-artifact@v4
        with:
          name: unmanic-py-dist-data-${{ steps.py_build_data.outputs.py_version }}
          path: dist/

  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Fetch all artifacts
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts/

      # Restore python package distribution data
      - name: Restore python package distribution data
        id: py_build_data
        run: |
          mkdir -p ./dist
          find ./artifacts/ -type f -name "*.whl" -exec cp -n {} ./dist/ \;
          find ./artifacts/ -type f -name "VERSION.txt" -exec cp -n {} ./dist/ \;
          ls -l ./dist/
          PY_VERSION=$(cat ./dist/VERSION.txt)
          echo "py_version=${PY_VERSION}" >> $GITHUB_OUTPUT

      # Use QEMU to build for other arch
      - name: Set up QEMU
        if: success()
        id: qemu
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
          
      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          file: docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}